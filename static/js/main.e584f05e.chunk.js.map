{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","helpers/filter.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","initialState","status","all","filterReducer","active","complited","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filterOptions","visibleTodos","options","filteredTodos","completed","Error","title","toLowerCase","includes","filterTodos","length","className","map","classNames","id","onClick","currentTodoActions","handleSelectTodo","TodoFilter","useState","tempQuery","setTempQuery","onSubmit","event","preventDefault","onChange","e","target","value","filterActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setUser","useEffect","userId","href","email","name","App","loadedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e584f05e.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  active = 'active',\n  complited = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAllAction = {\n  type: 'filter/status/SET:ALL',\n};\n\ntype SetStatusActiveAction = {\n  type: 'filter/status/SET:ACTIVE',\n};\n\ntype SetSatusComplitedAction = {\n  type: 'filter/status/SET:COMPLITED',\n};\n\nexport type SetQueryAction = {\n  type: 'filter/query/SET',\n  payload: string,\n};\n\ntype RemoveQueryAction = { type: 'filter/query/REMOVE' };\n\nconst setStatusAll = (): SetStatusAllAction => ({\n  type: 'filter/status/SET:ALL',\n});\n\nconst setStatusActive = (): SetStatusActiveAction => ({\n  type: 'filter/status/SET:ACTIVE',\n});\n\nconst setStatusComplited = (): SetSatusComplitedAction => ({\n  type: 'filter/status/SET:COMPLITED',\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/query/SET',\n  payload: query,\n});\n\nconst removeQuery = (): RemoveQueryAction => ({ type: 'filter/query/REMOVE' });\n\nexport const actions = {\n  setStatusAll,\n  setStatusActive,\n  setStatusComplited,\n  setQuery,\n  removeQuery,\n};\n\nexport type State = {\n  status: Status,\n  query: string,\n};\n\nexport type Action = (\n  SetStatusAllAction\n  | SetStatusActiveAction\n  | SetSatusComplitedAction\n  | SetQueryAction\n  | RemoveQueryAction\n);\n\nconst initialState = {\n  status: Status.all,\n  query: '',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/status/SET:ALL':\n      return {\n        ...state,\n        status: Status.all,\n      };\n\n    case 'filter/status/SET:ACTIVE':\n      return {\n        ...state,\n        status: Status.active,\n      };\n\n    case 'filter/status/SET:COMPLITED':\n      return {\n        ...state,\n        status: Status.complited,\n      };\n\n    case 'filter/query/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/query/REMOVE':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { filterTodos } from '../../helpers/filter';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const filterOptions = useAppSelector(state => state.filter);\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const visibleTodos = filterTodos(todos, filterOptions);\n\n  const handleSelectTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {visibleTodos.length ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={classNames({\n                  'has-background-info-light': currentTodo === todo,\n                })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                {todo.completed ? (\n                  <>\n                    <td className=\"is-vcentered\">\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    </td>\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className=\"has-text-success\">{todo.title}</p>\n                    </td>\n                  </>\n                ) : (\n                  <>\n                    <td className=\"is-vcentered\" />\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className=\"has-text-danger\">{todo.title}</p>\n                    </td>\n                  </>\n                )}\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleSelectTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('far', {\n                          'fa-eye-slash': currentTodo === todo,\n                          'fa-eye': currentTodo !== todo,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import { State as FilterState } from '../features/filter';\nimport { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const filterTodos = (todos: Todo[], options: FilterState) => {\n  let filteredTodos = todos;\n  const { status, query } = options;\n\n  switch (status) {\n    case Status.all:\n      break;\n\n    case Status.active:\n      filteredTodos = filteredTodos.filter(todo => !todo.completed);\n      break;\n\n    case Status.complited:\n      filteredTodos = filteredTodos.filter(todo => todo.completed);\n      break;\n\n    default:\n      throw new Error('Invalid filter status was set');\n  }\n\n  if (query) {\n    filteredTodos = filteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  return filteredTodos;\n};\n","import React, { useState } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const [tempQuery, setTempQuery] = useState('');\n\n  const dispatch = useAppDispatch();\n\n  const handleSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = e.target;\n\n    switch (value) {\n      case Status.all:\n        dispatch(filterActions.setStatusAll());\n        break;\n\n      case Status.active:\n        dispatch(filterActions.setStatusActive());\n        break;\n\n      case Status.complited:\n        dispatch(filterActions.setStatusComplited());\n        break;\n\n      default:\n        throw new Error('Invalid filter status was passed');\n    }\n  };\n\n  const handleQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTempQuery(e.target.value);\n    dispatch(filterActions.setQuery(e.target.value));\n  };\n\n  const handleClearQuery = () => {\n    setTempQuery('');\n    dispatch(filterActions.removeQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleSelect}>\n            <option value={Status.all}>All</option>\n            <option value={Status.active}>Active</option>\n            <option value={Status.complited}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={tempQuery}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n\n          {tempQuery && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              aria-label=\"clearSearchButton\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId).then(setUser);\n  }, []);\n\n  const dispatch = useAppDispatch();\n\n  const handleClose = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then(loadedTodos => dispatch(todosActions.setTodos(loadedTodos)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {\n                todos.length\n                  ? <TodoList />\n                  : <Loader />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal todo={currentTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}